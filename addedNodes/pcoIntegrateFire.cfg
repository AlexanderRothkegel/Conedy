[pcoIntegrateFire]
integrator = pcoBase
dimension = 1
parameter = 3
parametername1 = t_ref
standardvalue1 = 0.05
parametername2 = alpha
standardvalue2 = 0.9
parametername3 = timeDelay
standardvalue3 = 0.01
dynamics=
	if ( ( phase > t_ref - timeDelay ) && ( phase < 1 - timeDelay ) )
	{
		delta = 1.0 / log(alpha) * log ( pow(alpha, (phase - t_ref + timeDelay ) / (1 - t_ref ) )   - (1 - alpha) * coupling) - (phase -t_ref + timeDelay) / (1 - t_ref);
	   if (delta + phase > 1 - timeDelay )
            delta = 1 - timeDelay - phase;
	}
	else
		delta = 0;


dokumentation=
	oscillatory pulse-copuled integrate-and-fire neuron with exponential charging ( x(t) =-a \dot{x}(t) + I ) and refractory perdiod of length t\_ref < timeDelay. 
	Use pcoIntegrateFireDelay for the case t\ref >= timeDelay.
	Eigen-frequency and firing threshold normalized to 1. 
	$\alpha$ varies between 0 and 1 determines the leakage current (1 for non-leaky). $\alpha = e^{ - a}$ 

[pcoIntegrateFireDelay]
integrator = pcoDelay
dimension = 1
parameter = 2
parametername1 = t_ref
standardvalue1 = 0.05
parametername2 = alpha
standardvalue2 = 0.9
dynamics=
	if ( phase > t_ref)
	{
		delta = 1.0 / log(alpha) * log ( pow(alpha, (phase - t_ref) /(1-t_ref) )  - (1 - alpha) * coupling) -  (  phase - t_ref)/(1 - t_ref);
	}
	else
		delta = 0;


dokumentation=
	oscillatory pulse-copuled integrate-and-fire neuron with exponential charging ( x(t) = - a \dot{x}(t) + I ) and refractory perdiod of length t\_ref.
	Eigen-frequency and firing threshold normalized to 1. 
	$\alpha$ varies between 0 and 1 determines the leakage current (1 for non-leaky). $\alpha = e^{ - a}$ 
