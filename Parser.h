

// Generated by Bisonc++ V2.4.2 on Sat Mar 13 14:02:55 2010 +0100

#ifndef Parser_h_included
#define Parser_h_included

// $insert baseclass
#include "Parserbase.h"
// $insert scanner.h
#include "Scanner.h"


#undef Parser
class Parser: public ParserBase
{
    // $insert scannerobject
    Scanner d_scanner;
        
    public:
        int parse();

    private:
        void error(char const *msg);    // called on (syntax) errors
        int lex();                      // returns the next token from the
                                        // lexical scanner. 
        void print();                   // use, e.g., d_token, d_loc

    // support functions for parse():
        void executeAction(int ruleNr);
        void errorRecovery();
        int lookup(bool recovery);
        void nextToken();
};

inline void Parser::error(char const *msg)
{
    std::cerr << "Zeilennummer:"<< d_scanner.lineno() << std::endl;
    std::cerr << "Lasttoken:"<< d_scanner.YYText() << std::endl;
    std::cerr << msg << std::endl;
}

// $insert lex
inline int Parser::lex()
{
    return d_scanner.yylex();
}

inline void Parser::print()      // use d_token, d_loc
{}


#endif
