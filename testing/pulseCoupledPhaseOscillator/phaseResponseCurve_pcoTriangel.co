



network n;

double phi;
double coupling;

network_nodeVerbosity=2.5;

int nodeNumber;
int otherNodeNumber;
int referenceNodeNumber;

streamOutNode_append = 1.0;

nodeNumber = 0;


pcoTriangel_a 	= 0.2;
pcoTriangel_b	 	= 0.5;
pcoTriangel_c	 	= 0.8;
pcoTriangel_h	 	= 0.01;


coupling 			 		= 0.01;


print "#phi \Delta(\phi)"+newline;

streamOutNode_append =1.0;
samplingTime = 10000.0;


:rm _tmp:;

	nodeNumber = n.addNode<pcoTriangel>();
	otherNodeNumber = n.addNode<pcoTriangel>();
	referenceNodeNumber = n.addNode<pcoTriangel>();
	n.addEdge(otherNodeNumber,nodeNumber,0.01);
	n.observe(referenceNodeNumber, "_tmp");
	n.observe(nodeNumber, "_tmp");

for (phi = 0.0;phi < 1.0; phi = phi + 0.001)
{

	

	
#	n.printNodeStatistics();

	n.setTime(0.0);
	n.setState(nodeNumber,phi);
	n.setState(referenceNodeNumber,phi);
	n.setState(otherNodeNumber,0.9999999);
	
	n.evolve (0.0,0.0000002);
	n.snapshot();

	
#	n.clear();	

};

n.clear();	

:awk '{ if (NR % 2 == 0)  print $1 " " $2 - $1}' _tmp > output/phaseResponseCurve_pcoTriangel.co.curve :;



